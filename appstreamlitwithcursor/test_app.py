#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement de l'application Strategic Intelligence Dashboard
"""

import sys
import os
import importlib.util

def test_imports():
    """Teste l'importation des modules requis"""
    print("üîç Test des imports...")
    
    required_modules = [
        'streamlit',
        'pandas', 
        'plotly',
        'numpy',
        'json',
        'datetime'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå {module} - MANQUANT")
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n‚ö†Ô∏è Modules manquants: {', '.join(missing_modules)}")
        print("Installez-les avec: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Tous les imports sont OK")
    return True

def test_local_modules():
    """Teste l'importation des modules locaux"""
    print("\nüîç Test des modules locaux...")
    
    local_modules = [
        'strategic_analyzer',
        'data_manager'
    ]
    
    for module in local_modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}.py")
        except ImportError as e:
            print(f"‚ùå {module}.py - ERREUR: {e}")
            return False
    
    print("‚úÖ Tous les modules locaux sont OK")
    return True

def test_data_manager():
    """Teste le module DataManager"""
    print("\nüîç Test du DataManager...")
    
    try:
        from data_manager import DataManager
        
        # Cr√©er une instance
        dm = DataManager()
        print("‚úÖ Instance DataManager cr√©√©e")
        
        # Test de sauvegarde de configuration
        config = {"test": "value"}
        result = dm.save_config(config)
        print(f"‚úÖ Sauvegarde config: {result}")
        
        # Test de chargement de configuration
        loaded_config = dm.load_config()
        print(f"‚úÖ Chargement config: {loaded_config is not None}")
        
        # Test de r√©cup√©ration des analyses
        analyses = dm.get_all_analyses()
        print(f"‚úÖ R√©cup√©ration analyses: {len(analyses)} analyses trouv√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur DataManager: {e}")
        return False

def test_strategic_analyzer():
    """Teste le module StrategicAnalyzer"""
    print("\nüîç Test du StrategicAnalyzer...")
    
    try:
        from strategic_analyzer import StrategicAnalyzer
        
        # Cr√©er une instance
        analyzer = StrategicAnalyzer()
        print("‚úÖ Instance StrategicAnalyzer cr√©√©e")
        
        # Test d'analyse simul√©e
        test_content = """
        Amazon d√©veloppe sa strat√©gie d'IA g√©n√©rative pour concurrencer ChatGPT.
        La soci√©t√© investit massivement dans le d√©veloppement de mod√®les de langage
        et pr√©voit de lancer de nouveaux services d'IA dans les prochains mois.
        """
        
        result = analyzer.analyze_content(
            content=test_content,
            focus_area="Technologie",
            urgency_level="√âlev√©",
            company_size="Grande Entreprise",
            ai_model="Simulation",
            weights=[0.3, 0.25, 0.2, 0.15, 0.1]
        )
        
        print(f"‚úÖ Analyse g√©n√©r√©e: {len(result)} caract√®res")
        print(f"‚úÖ Contient 'ANALYSE STRAT√âGIQUE': {'ANALYSE STRAT√âGIQUE' in result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur StrategicAnalyzer: {e}")
        return False

def test_streamlit_app():
    """Teste que l'application Streamlit peut √™tre import√©e"""
    print("\nüîç Test de l'application Streamlit...")
    
    try:
        # Test d'importation de l'app
        spec = importlib.util.spec_from_file_location("app", "app.py")
        app_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(app_module)
        
        print("‚úÖ Application Streamlit import√©e avec succ√®s")
        
        # Test de cr√©ation de l'instance dashboard
        dashboard = app_module.StrategicDashboard()
        print("‚úÖ Instance StrategicDashboard cr√©√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur application Streamlit: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß† Strategic Intelligence Dashboard - Tests\n")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Modules locaux", test_local_modules),
        ("DataManager", test_data_manager),
        ("StrategicAnalyzer", test_strategic_analyzer),
        ("Application Streamlit", test_streamlit_app)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ Tous les tests sont pass√©s ! L'application est pr√™te √† √™tre lanc√©e.")
        print("\nPour lancer l'application:")
        print("streamlit run app.py")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} test(s) ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 